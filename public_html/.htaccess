# ----------------------------------------------------------------------
# IMPORTANT: Troubleshooting Internal Server Errors (HTTP 500)
# ----------------------------------------------------------------------
# If you are seeing a 500 error after placing or modifying this .htaccess file,
# it usually means there's a syntax error, a conflicting rule, or a required
# Apache module (like mod_rewrite, mod_deflate, mod_expires) is not enabled
# on your server.

# To debug:
# 1. Access your server's **error logs**. These logs (often named error_log or apache_error.log)
#    will provide specific details about what line or directive caused the error.
#    The path to these logs varies by hosting provider (check your hosting panel or ask support).
# 2. **Comment out sections one by one.** Start by commenting out *everything* in this
#    .htaccess file except for the `RewriteEngine On` line.
#    - If the 500 error disappears, then the issue is within the commented-out code.
#    - Gradually uncomment sections (e.g., first the URL Rewriting, then HTTPS, then Security, etc.).
#    - After uncommenting a section, save the file and check your website. If the 500 error
#      reappears, you've found the problematic section.
#    - Within that section, comment out individual lines until you pinpoint the exact directive
#      causing the issue.
# 3. **Verify Apache Modules.** If a specific directive (e.g., `RewriteRule`, `AddOutputFilterByType`,
#    `ExpiresActive`) causes the error, it's highly likely that the corresponding Apache module
#    (e.g., `mod_rewrite`, `mod_deflate`, `mod_expires`) is not enabled on your server.
#    You may need to contact your hosting provider to enable these.

# ----------------------------------------------------------------------
# This .htaccess file provides common configurations for web projects,
# including URL rewriting, HTTPS enforcement, security, and performance.
# Uncomment or modify sections as per your project's specific requirements.

# ----------------------------------------------------------------------
# 1. Core Apache Settings
# ----------------------------------------------------------------------

# Turn on the Rewrite Engine
# This is essential for all mod_rewrite rules to function.
RewriteEngine On

# Define the RewriteBase
# Use this if your project is located in a subfolder (e.g., /myproject/).
# If your project is in the root directory (e.g., public_html), you can comment this out
# or set it to just '/'.
# Example: If your site is at 'http://example.com/myproject/', uncomment and set:
RewriteBase /

# ----------------------------------------------------------------------
# 2. URL Rewriting / Front Controller Pattern
# ----------------------------------------------------------------------

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Redirect all requests to the public directory
    RewriteRule ^$ public/ [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} !^/public/
    RewriteRule ^(.*)$ public/$1
</IfModule>

# This section is commonly used for PHP frameworks (like Laravel, Symfony, CodeIgniter)
# or custom applications that use a single "index.php" file to handle all requests.
# It rewrites all requests to index.php unless the request is for an actual file or directory.

# Check if the requested path is NOT an existing file
RewriteCond %{REQUEST_FILENAME} !-f
# Check if the requested path is NOT an existing directory
RewriteCond %{REQUEST_FILENAME} !-d
# If both conditions are met, rewrite the request to index.php
# [QSA] appends any query string from the original request
# [L] means "last rule" - no more rules will be processed for this request
RewriteRule ^(.*)$ index.php [QSA,L]

# Optional: Hide .php extensions
# Uncomment this section if you want URLs like 'example.com/about' instead of 'example.com/about.php'
 RewriteCond %{REQUEST_FILENAME} !-d
 RewriteCond %{REQUEST_FILENAME}.php -f
 RewriteRule ^(.*)$ $1.php [L]

# ----------------------------------------------------------------------
# 3. HTTPS Enforcement
# ----------------------------------------------------------------------

# Redirect all HTTP traffic to HTTPS. Highly recommended for all websites.
# Ensure you have an SSL certificate installed on your server before enabling this.
# You can choose between non-www to www HTTPS or www to non-www HTTPS.

# Option A: Force HTTPS (and keep current www/non-www)
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Option B: Force HTTPS and NON-WWW
# RewriteCond %{HTTPS} off [OR]
# RewriteCond %{HTTP_HOST} ^www\. [NC]
# RewriteRule ^(.*)$ https://yourdomain.com%{REQUEST_URI} [L,R=301]

# Option C: Force HTTPS and WWW
# RewriteCond %{HTTPS} off [OR]
# RewriteCond %{HTTP_HOST} !^www\. [NC]
# RewriteRule ^(.*)$ https://www.yourdomain.com%{REQUEST_URI} [L,R=301]

# ----------------------------------------------------------------------
# 4. Security Enhancements
# ----------------------------------------------------------------------

# Prevent directory listing
# This prevents visitors from seeing a list of files in directories if there's no index file.
Options -Indexes

# Block access to .htaccess, .htpasswd files
# These files should never be publicly accessible.
<Files ".ht*">
    Require all denied
</Files>

# Disable server signature (e.g., Apache/2.4.6 (CentOS) Server at example.com Port 80)
# This prevents revealing server information in error pages.
ServerSignature Off

# Optional: Prevent access to sensitive files (e.g., configuration files)
 <FilesMatch "\.(inc|log|ini|tpl|yml|json)$">
     Require all denied
 </FilesMatch>

# Optional: Protect specific files/folders with basic authentication (needs .htpasswd)
# AuthType Basic
# AuthName "Restricted Area"
# AuthUserFile /path/to/.htpasswd  # IMPORTANT: Change this path!
# Require valid-user

# ----------------------------------------------------------------------
# 5. Performance Optimizations
# ----------------------------------------------------------------------

# Enable Gzip Compression for common text-based file types
# This reduces bandwidth usage and speeds up page load times.
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE application/json
    AddOutputFilterByType DEFLATE image/svg+xml
</IfModule>

# Leverage Browser Caching (Expires Headers)
# This tells browsers to cache static assets for a specified duration, reducing future requests.
#<IfModule mod_expires.c>
#    ExpiresActive On
#    ExpiresByType image/jpg "access plus 1 year"
#    ExpiresByType image/jpeg "access plus 1 year"
#    ExpiresByType image/gif "access plus 1 year"
#    ExpiresByType image/png "access plus 1 year"
#    ExpiresByType image/webp "access plus 1 year"
#    ExpiresByType image/svg+xml "access plus 1 year"
#    ExpiresByType text/css "access plus 1 month"
#    ExpiresByType text/javascript "access plus 1 month"
#    ExpiresByType application/javascript "access plus 1 month"
#    ExpiresByType application/x-javascript "access plus 1 month"
#    ExpiresByType application/pdf "access plus 1 month"
#    ExpiresByType application/vnd.ms-fontobject "access plus 1 month"
#    ExpiresByType application/x-font-woff "access plus 1 month"
#    ExpiresByType application/x-font-woff2 "access plus 1 month"
#    ExpiresByType application/x-shockwave-flash "access plus 1 month"
#    ExpiresByType image/x-icon "access plus 1 year"
#    ExpiresDefault "access plus 2 days" # Default for other files
#</IfModule>

# ----------------------------------------------------------------------
# 6. Custom Error Pages
# ----------------------------------------------------------------------

# Define custom pages for common HTTP errors.
# Ensure these files (e.g., 404.html, 500.html) exist in your document root.
# ErrorDocument 404 /404.html
# ErrorDocument 403 /403.html
# ErrorDocument 500 /500.html

# ----------------------------------------------------------------------
# 7. PHP Settings (Optional)
# ----------------------------------------------------------------------

# You can adjust PHP settings here if your host allows (often overridden by php.ini)
# php_value upload_max_filesize 64M
# php_value post_max_size 64M
# php_value memory_limit 128M
# php_value max_execution_time 300
# php_value max_input_time 300
# php_flag display_errors Off # Good for production
# php_flag log_errors On     # Good for production
# php_value error_log /path/to/php-error.log # Change this path!

# ----------------------------------------------------------------------
# END .htaccess
# ----------------------------------------------------------------------

